{"name":"Hitch","tagline":"Handle images in your webapp with ease","body":"# Hitch\r\n\r\n[![Build Status](https://travis-ci.org/clarkf/hitch.png?branch=master)](https://travis-ci.org/clarkf/hitch)\r\n[![Latest Stable Version](https://poser.pugx.org/clarkf/hitch/v/stable.png)](https://packagist.org/packages/clarkf/hitch)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/52d6d684ec137507080009a2/badge.png)](https://www.versioneye.com/user/projects/52d6d684ec137507080009a2)\r\n[![Coverage Status](https://coveralls.io/repos/clarkf/hitch/badge.png)](https://coveralls.io/r/clarkf/hitch)\r\n\r\n\r\n\r\n__Table of Contents__\r\n\r\n1. [Installation](#installation)\r\n2. [Use](#use)\r\n    1. [Configuration](#configuration)\r\n        1. [Version Descriptions](#version-descriptions)\r\n        2. [Storage Adapters](#storage-adapters)\r\n    2. [Uploading](#uploading)\r\n\r\n## Installation\r\n\r\nAdd the following to your `composer.json` file's `require` property:\r\n```JSON\r\n    \"clarkf/hitch\": \"@dev-master\"\r\n```\r\n\r\n___Note___: Hitch is currently alpha software.  Requiring `@dev-master`\r\nwill load Hitch into your project, but will not guarantee stability.\r\nUse at your own risk.  Or wait until a version is tagged.\r\n\r\n## Use\r\n\r\n### Configuration\r\n\r\nInstantiate a new `Hitch\\Uploader` for each image type you'd like to\r\nmanage.  It's suggested that you extend the class to provide your own\r\nconfiguration:\r\n\r\n```PHP\r\nclass ImageUploader extends \\Hitch\\Uploader\r\n{\r\n    public function getBaseDir()\r\n    {\r\n        // Override getBaseDir() to provide the folder you'd like to\r\n        // store this image type in.\r\n        return \"images/covers\";\r\n    }\r\n\r\n    public function getVersionDescriptions()\r\n    {\r\n        // Provide your own version descriptions here\r\n    }\r\n\r\n    public function getStorageAdapters()\r\n    {\r\n        // Provide your own storage adapter(s) here\r\n    }\r\n}\r\n```\r\n\r\n#### Version Descriptions\r\n\r\nA version description is simply a description of what processes an image\r\nneeds to go through in order to be deemed a specific 'version' of an\r\nimage.  For example, for an image to be considered a thumbnail, it needs\r\nto be resized down to a specific size (say, 100x100):\r\n\r\n```PHP\r\npublic function getVersionDescriptions()\r\n{\r\n    return array(\r\n        'thumb' => array(\r\n            'resize' => array(100, 100)\r\n        )\r\n    );\r\n}\r\n```\r\n\r\n#### Storage Adapters\r\nA storage adapter is a mechanism that stores an image somewhere.\r\nCurrently, the only adapter shipped is the `Hitch\\Storage\\File`, which\r\nwrites the image to your local filesystem.\r\n\r\nSay we want to store all images in `./public/media`, and we want each\r\nimage in a dated subdirectory:\r\n\r\n```PHP\r\nclass ImageUploader extends \\Hitch\\Uploader\r\n{\r\n    public function getStorageAdapters()\r\n    {\r\n        return array(\r\n            // The first parameter passed to the constructor here is the\r\n            // 'base directory' in which to store all media\r\n            new \\Hitch\\Storage\\File('./public/media')\r\n        );\r\n    }\r\n\r\n    public function getBaseDir()\r\n    {\r\n        return date('Y-m-d') . '/';\r\n    }\r\n}\r\n```\r\n\r\nIf you then upload `mygreatjpeg.jpg`, it would end up at\r\n`./public/media/2014-01-15/mygreatjpeg.jpg` (assuming that today is\r\nJanuary 15th).\r\n\r\n### Uploading\r\n\r\nTo upload a file and generate all requisite versions, you must simply\r\npass a `Symfony\\Component\\HttpFoundation\\File\\File` instance to your\r\nuploader's `store` method.\r\n\r\nIn the example below, we have some sort of an ORM-style Model class,\r\nthat uses custom setters patterned after `setXXXAttribute()`:\r\n\r\n```PHP\r\nuse Symfony\\Component\\HttpFoundation\\File\\File;\r\n\r\nclass MyModel extends BaseModelClass\r\n{\r\n    protected $uploader;\r\n\r\n    public function __construct(/* ... */)\r\n    {\r\n        // ...\r\n        $this->uploader = new ImageUploader;\r\n        // ...\r\n    }\r\n\r\n    // ...\r\n\r\n    /**\r\n     * Set this instance's `file` attribute (i.e. $model->file = $file).\r\n     * \r\n     * @param File $file The input file\r\n     * \r\n     * @return void\r\n     */\r\n    public function setImageAttribute(File $file)\r\n    {\r\n        $this->uploader->store($file);\r\n    }\r\n\r\n    // ...\r\n}\r\n```\r\n\r\nAnd that's it!\r\n","google":"UA-47170891-1","note":"Don't delete this file! It's used internally to help with page regeneration."}